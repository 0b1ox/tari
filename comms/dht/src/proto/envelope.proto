syntax = "proto3";

package tari.dht.envelope;

enum DhtMessageType {
    // Indicated this message is not a DHT message
    DhtMessageTypeNone = 0;
    // Join Request
    DhtMessageTypeJoin = 1;
    // Discovery request
    DhtMessageTypeDiscovery = 2;
    // Response to a discovery request
    DhtMessageTypeDiscoveryResponse = 3;
    // Message was rejected
    DhtMessageTypeRejectMsg = 4;
    // Request stored messages from a node
    DhtMessageTypeSafRequestMessages = 20;
    // Stored messages response
    DhtMessageTypeSafStoredMessages = 21;
}

message DhtHeader {
    uint32 version = 1;
    oneof destination {
        // The sender has chosen not to disclose the message destination, or the destination is
        // the peer being sent to.
        bool unknown = 2;
        // Destined for a particular public key
        bytes public_key = 3;
        // Destined for a particular node id, or network region
        bytes node_id = 4;
    }

    // Origin public key of the message. This can be the same peer that sent the message
    // or another peer if the message should be forwarded. This is optional but must be specified
    // if the ENCRYPTED flag is set.
    DhtOrigin origin = 5;
    // The type of message
    DhtMessageType message_type = 6;
    // The network for which this message is intended (e.g. TestNet, MainNet etc.)
    Network network = 7;
    uint32 flags = 8;
}

enum Network {
    // Main net (default)
    NetworkMainNet = 0;
    // Test net
    NetworkTestNet = 1;
    // Network used for local tests
    NetworkLocalTest = 2;
}

message DhtEnvelope {
    DhtHeader header = 1;
    bytes body = 2;
}

message DhtOrigin {
    bytes public_key = 1;
    bytes signature = 2;
}