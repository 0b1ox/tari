# A sample log configuration file for running in release mode. By default, this configuration splits up log messages to
# three destinations:
#    * Console: For log messages with level ERROR and higher
#    * log/network.log: INFO-level logs related to the comms crate. This file will be quite busy since there
#      are lots of P2P debug messages, and so this traffic is segregated from the application log messages
#    * log/base_layer.log: Non-comms related WARN-level messages and higher are logged into this file
#
#  See https://docs.rs/log4rs/0.8.3/log4rs/encode/pattern/index.html for deciphering the log pattern. The log format
#  used in this sample configuration prints messages as:
#  timestamp [target] LEVEL message
refresh_rate: 30 seconds
appenders:
  # An appender named "stdout" that writes to stdout
  stdout:
    kind: console
    encoder:
      pattern: "{d(%Y-%m-%d %H:%M:%S.%f)} [{t}] {h({l}):5} {m}{n}"

  # An appender named "network" that writes to a file with a custom pattern encoder
  network:
    kind: rolling_file
    path: "log/network.log"
    policy:
      kind: compound
      trigger:
        kind: size
        limit: 10mb
      roller:
        kind: fixed_window
        base: 1
        count: 5
        pattern: "log/network.{}.log"
    encoder:
      pattern: "{d(%Y-%m-%d %H:%M:%S.%f)} [{t}] {l:5} {m}{n}"

  # An appender named "base_layer" that writes to a file with a custom pattern encoder
  base_layer:
    kind: rolling_file
    path: "log/base_layer.log"
    policy:
      kind: compound
      trigger:
        kind: size
        limit: 10mb
      roller:
        kind: fixed_window
        base: 1
        count: 5
        pattern: "log/base_layer.{}.log"
    encoder:
      pattern: "{d(%Y-%m-%d %H:%M:%S.%f)} [{t}] {l:5} {m}{n}"

       # An appender named "base_layer" that writes to a file with a custom pattern encoder
  other:
    kind: rolling_file
    path: "log/other.log"
    policy:
      kind: compound
      trigger:
        kind: size
        limit: 10mb
      roller:
        kind: fixed_window
        base: 1
        count: 5
        pattern: "log/other.{}.log"
    encoder:
      pattern: "{d(%Y-%m-%d %H:%M:%S.%f)} [{t}] {l:5} {m}{n}"

# Set the default logging level to "error" and attach the "stdout" appender to the root
root:
  level: warn
  appenders:
    - base_layer

loggers:
  # Set the maximum console output to "error"
  base_node:
    level: error
    appenders:
      - stdout
    additive: false

  # Route log events sent to the "comms" logger to the "network" appender
  comms:
    level: trace
    appenders:
      - network
    additive: false
  # Route log events sent to the "p2p" logger to the "network" appender
  p2p:
    level: trace
    appenders:
      - network
    additive: false
    # Route log events sent to the "p2p" logger to the "network" appender
  yamux:
    level: trace
    appenders:
      - network
    additive: false
 # Route log events sent to the "mio" logger to the "other" appender
  mio:
    level: trace
    appenders:
      - network
    additive: false
  # Route log events sent to the "rustyline" logger to the "other" appender
  rustyline:
    level: trace
    appenders:
      - other
    additive: false
  # Route log events sent to the "tokio_util" logger to the "other" appender
  tokio_util:
    level: trace
    appenders:
      - other
    additive: false
